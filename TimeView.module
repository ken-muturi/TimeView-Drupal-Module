<?php

// $Id$

/**
 * Initialize the TimeView, timeline interface.
 *
 * This function loads external resources that are used by the TimeView 
 * module. Mainly it lods the module specific css-files and the Timeline 
 * rendering javascript from Simile.
*/
function TimeView_init() {
  include_once(drupal_get_path('module', 'TimeView') . '/TimeView.inc');
  drupal_add_css(drupal_get_path('module', 'TimeView') . '/TimeView.css');
  // Load Timeline 2.3.0 javascripts
  // Excplicitly load the ajax api to avoid load on the timeline server
  drupal_add_js('Timeline_ajax_url="' . drupal_get_path('module', 'TimeView') . '/timeline_2.3.0/timeline_ajax/simile-ajax-api.js";
                 Timeline_urlPrefix="' . drupal_get_path('module', 'TimeView') . '/timeline_2.3.0/timeline_js/";       
                 Timeline_parameters="bundle=true";', 
                array('type' => 'inline',));
  drupal_add_js(drupal_get_path('module', 'TimeView') . '/timeline_2.3.0/timeline_js/timeline-api.js');
  // Load the specific timeline we want to use.
  drupal_add_js(drupal_get_path('module', 'TimeView') . '/TimeView.js');
  // Initialize the timeline javascript with another javascript function
  drupal_add_js(TimeView_jQuery(), 'inline');
}

/** 
 * Generates a user help page. 
 *
 * Creates a help page for the TimeView module. Explains configuration, usage 
 * and some tips and tricks on what can be done.
 *
 * @param string $path
 *   The router menu path, as defined in TimeView_menu().
 * @param array $arg
 *   An array that corresponds to the return value of the arg() function, for 
 *   modules that want to provide help that is specific to certain values of 
 *   wildcards in $path. For example, you could provide help for the path 
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array 
 *   should always be used rather than directly invoking arg(), because your 
 *   hook implementation may be called for other purposes besides building the 
 *   current page's help. Note that depending on which module is invoking 
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to 
 *   $arg[11] will always be set.
 *   
 * @return string
 *   A localized string containing the help text.
*/
function TimeView_help($path, $arg){
  $help_output = '';
  return $help_output;
}

/**
 * Handles module permissions.
 *
 * Defines the permissions that are used by the TimeView module. The 
 * permissions are: 
 * - "access TimeView": Access the timeline and see open information.
 * - "access TimeView private": Private information is intended for 
 *   Authorized Users. If there is no sensitive information on your timeline
 *   disregard this permission.
 * - "administer TimeView": Allows users to administer the TimeView module.
 *
 * @return array 
 *   An array of permission strings. The strings must not be wrapped with the 
 *   t() function, since the string extractor takes care of extracting 
 *   permission names defined in the perm hook for translation.
*/
function TimeView_permission(){
  return array('administer TimeView' => array(
                 'title' => t('Administer TimeView'),
                 'description' => t('Allows a user to administer the timeline 
                                     and general settings of the TimeView 
                                     module.'),
               ),
               'access TimeView' => array(
                 'title' => t('Access TimeView'),
                 'description' => t('Allows users to view the timeline and 
                                     access open information.'),
               ), 
               'edit TimeView' => array(
                 'title' => t('Edit TimeView'),
                 'description' => t('With this permissions a user can add and
                                     remove non-static things from the 
                                     timeline.'),
               ),
              );
}

/**
 * Creates the administration form for the TimeView module.
 *
 * Creates the administration form for the TimeView module, the form can be 
 * found at /admin/settings/TimeView as defined in TimeView_menu.
 *
 * @return array $form
 *   A drupal form formatted by system_settings_form().
*/
function TimeView_admin(){
  $form = array();
	return system_settings_form($form);
}

/**
 * Creates the TimeView paths and menu items.
 *
 * Defines paths to TimeView pages and defines TimeView menu items. The 
 * items that are defined are:
 * - admin/config/content/timeview: This is the administration page
 * - /timeview: This is the XML-generation hook
*/
function TimeView_menu() {
  $items = array();
  $items['admin/config/content/timeview'] = 
    array('title' => 'TimeView',
	  'description' => 'Administration page for the TimeView module.',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('TimeView_admin'),
	  'access arguments' => array('administer TimeView'),
	  'type' => MENU_NORMAL_ITEM,
	  );
	$items['timeview/download'] =
    array('page callback' => 'TimeView_download',
	  'access arguments' => array('access TimeView'),
	  'type' => MENU_CALLBACK,
	  );
	$items['timeview'] =
    array('page callback' => 'TimeView_XML',
	  'access arguments' => array('access TimeView'),
	  'type' => MENU_CALLBACK,
	  );
  return $items;
}

/**
 * Creates the blocks of the TimeView module.
 *
 * Creates the block content for the TimeView module. This module has two 
 * blocks, the timeline block and the timeline event input block.
 * 
 * @return array $blocks
*/
function TimeView_block_info(){
  $blocks = array();

  // This is the timeline block
  $blocks['TimeView_timeline'] = array(
    'info' => t('TimeView Timeline'),
  );
  
  // This is the timeline event input
  $blocks['TimeView_input'] = array(
    'info' => t('TimeView Input'),
  );
  
  return $blocks;
}

/**
 * Creates the configuration form for the TimeView module blocks.
 *
 * Creates the configuration form for the TimeView module blocks.
 *
 * @param string $delta
 *   Which block is being configured. This is a unique identifier for the 
 *   block within the module, defined in hook_block_info().
 *
 * @return array $form
 *   A configuration form, if one is needed for your block beyond the standard 
 *   elements that the block module provides (block title, visibility, etc.).
*/
function TimeView_block_configure($delta = '') {
  $form = array();
  return $form; 
}

/**
 * The main TimeView blocks view. This is where the timeline is!
 *
 * The pages of the TimeView module are rendered here, Most of the actual 
 * rendering is made using external functions but this function passes them 
 * to the renderer.
 *
 * @param string $delta
 *   Which block to render. This is a unique identifier for the block within 
 *   the module, defined in TimeView_block_info().
 *
 * @return array $page_content
 *   An array containing the following elements:
 *   - subject: The default localized title of the block. If the block does 
 *     not have a default title, this should be set to NULL.
 *   - content: The content of the block's body. This may be a renderable 
 *     array (preferable) or a string containing rendered HTML content.
*/
function TimeView_block_view($delta = '') {
  $page_content = array('subject' => '',
                        'content' => '',);
  
  if (module_exists('locale')) {
    $languages = language_list();
    // Todo: Implement translations
  }
  if ($delta == 'TimeView_timeline') {
    $page_content['content'] .= '<div id="TimeView">';
    $page_content['content'] .= '<div id="TimeView_timeline"></div>';
    $page_content['content'] .= '</div>';
  }
  if ($delta == 'TimeView_input') {
    $page_content['content'] .= '<div id="TimeView_input">';
    $page_content['content'] .= drupal_render(drupal_get_form('_TimeView_Input'));
    $page_content['content'] .= '</div>';
  }
  return $page_content;
}

